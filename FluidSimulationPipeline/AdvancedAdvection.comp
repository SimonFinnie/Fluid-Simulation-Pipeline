#version 430 core

layout (local_size_x = 8, local_size_y = 8, local_size_z = 1) in;

layout(rgba32f, binding = 0) uniform image2D inGrid;
layout(rgba32f, binding = 1) uniform image2D outGrid;
layout(rgba32f, binding = 2) uniform image2D velocityGrid;

layout (location = 0) uniform float timeStep;
layout (location = 1) uniform ivec2 imageSize;

ivec2 AdjustLocation(ivec2 gridCoord){
	if(gridCoord.x >= imageSize.x){
		gridCoord.x = imageSize.x - 1;
	}
	else if(gridCoord.x < 1){
		gridCoord.x = 0;
	}

	if(gridCoord.y >= imageSize.y){
		gridCoord.y = imageSize.y - 1;
	}
	else if(gridCoord.y < 1){
		gridCoord.y = 0;
	}
	return gridCoord;
}

vec2 AdjustLocation(vec2 gridCoord){
	if(gridCoord.x >= imageSize.x){
		gridCoord.x = imageSize.x - 1;
	}
	else if(gridCoord.x < 1){
		gridCoord.x = 0;
	}

	if(gridCoord.y >= imageSize.y){
		gridCoord.y = imageSize.y - 1;
	}
	else if(gridCoord.y < 1){
		gridCoord.y = 0;
	}
	return gridCoord;
}

vec2 DetermineStaggerXVector(ivec2 gridCoord, vec2 currGridValue){
	// for interpolating xVectors y component
	vec2 rightGridValue = imageLoad(velocityGrid, gridCoord + ivec2(1,0)).xy;
	vec2 downGridValue = imageLoad(velocityGrid, gridCoord - ivec2(0,1)).xy;
	vec2 downRightGridValue = imageLoad(velocityGrid, gridCoord + ivec2(1,-1)).xy;

	// vector for right staggered point
	float xVecY = (currGridValue.y + rightGridValue.y + downGridValue.y + downRightGridValue.y)/4;
	if(currGridValue.x == 0){
		xVecY = 0;
	}
	return vec2(currGridValue.x, xVecY);
}


vec2 DetermineStaggerYVector(ivec2 gridCoord, vec2 currGridValue){
	// for interpolating yVectors x component
	vec2 leftGridValue = imageLoad(velocityGrid, gridCoord - ivec2(1,0)).xy;
	vec2 upGridValue = imageLoad(velocityGrid, gridCoord + ivec2(0,1)).xy;
	vec2 upLeftGridValue = imageLoad(velocityGrid, gridCoord + ivec2(-1,1)).xy;

	// vector for up staggered point
	float yVecX = (currGridValue.x + leftGridValue.x + upGridValue.x + upLeftGridValue.x)/4;
	if(currGridValue.y == 0){
		yVecX = 0;
	}
	return vec2(yVecX, currGridValue.y);
}


vec2 MacToCenter(ivec2 gridCoord){
	
	gridCoord = AdjustLocation(gridCoord);
	vec2 currPoint = imageLoad(velocityGrid, gridCoord).xy;

	ivec2 leftPointCoord = gridCoord + ivec2(-1,0);
	leftPointCoord = AdjustLocation(leftPointCoord);
	vec2 leftPoint = imageLoad(velocityGrid, leftPointCoord).xy;

	ivec2 downPointCoord = gridCoord + ivec2(0,-1);
	downPointCoord = AdjustLocation(downPointCoord);
	vec2 downPoint = imageLoad(velocityGrid, downPointCoord).xy;
	return vec2((leftPoint.x + currPoint.x)/2.0, (downPoint.y + currPoint.y)/2.0);
}

vec2 CubicInterpCalc(float alpha, vec2 q1, vec2 q2, vec2 q3, vec2 q4){
	float alphaSq = pow(alpha,2);
	float alphaCu = pow(alpha,3);
	vec2 interpQ1 = q1 * ((0.5 * alphaSq) - ((1.0/3.0) * alpha) - ((1.0/6.0) * alphaCu));
	vec2 interpQ2 = q2 * (1 - alphaSq + (0.5 * (alphaCu - alpha)));
	vec2 interpQ3 = q3 * (alpha + (0.5*(alphaSq - alphaCu)));
	vec2 interpQ4 = q4 * ((1.0/6.0) * (alphaCu - alpha));
	return interpQ1 + interpQ2 + interpQ3 + interpQ4;
}

vec2 BiCubicInterpolate(vec2 location){
	vec2 a1, a2, a3, a4;
	vec2 b1, b2, b3, b4;
	vec2 c1, c2, c3, c4;
	vec2 d1, d2, d3, d4;

	ivec2 currCenter = ivec2(floor(location.x), floor(location.y));

	//calculating each of the xValues from the top to the bottom of the y offset values for BiCubic interpolation
	float alphaX = location.x - currCenter.x;
	float alphaY = location.y - currCenter.y;

	a1 = MacToCenter(currCenter + ivec2(-1,-1)); 
	a2 = MacToCenter(currCenter + ivec2(0,-1)); 
	a3 = MacToCenter(currCenter + ivec2(1,-1)); 
	a4 = MacToCenter(currCenter + ivec2(2,-1)); 

	vec2 aResult = CubicInterpCalc(alphaX, a1, a2, a3, a4);

	b1 = MacToCenter(currCenter + ivec2(-1,0)); 
	b2 = MacToCenter(currCenter + ivec2(0,0)); 
	b3 = MacToCenter(currCenter + ivec2(1,0)); 
	b4 = MacToCenter(currCenter + ivec2(2,0)); 

	vec2 bResult = CubicInterpCalc(alphaX, b1, b2, b3, b4);

	c1 = MacToCenter(currCenter + ivec2(-1,1));
	c2 = MacToCenter(currCenter + ivec2(0,1));
	c3 = MacToCenter(currCenter + ivec2(1,1));
	c4 = MacToCenter(currCenter + ivec2(2,1));

	vec2 cResult = CubicInterpCalc(alphaX, c1, c2, c3, c4);

	d1 = MacToCenter(currCenter + ivec2(-1,2)); 
	d2 = MacToCenter(currCenter + ivec2(0,2)); 
	d3 = MacToCenter(currCenter + ivec2(1,2)); 
	d4 = MacToCenter(currCenter + ivec2(2,2));

	vec2 dResult = CubicInterpCalc(alphaX, d1, d2, d3, d4);

	vec2 result = CubicInterpCalc(alphaY, aResult, bResult, cResult, dResult);

	return result;
}

vec2 ApplyRungeKutta(vec2 currLocation, vec2 currentValue){
	vec2 k1 = currentValue;

	vec2 k2Location = currLocation - 0.5 * timeStep * k1;
	k2Location = AdjustLocation(k2Location);
	vec2 k2 = BiCubicInterpolate(k2Location);

	vec2 k3Location = currLocation - 0.75 * timeStep * k2;
	k3Location = AdjustLocation(k3Location);
	vec2 k3 = BiCubicInterpolate(k3Location);

	vec2 spaceStep = ((2.0/9.0) * timeStep * k1) + ((1.0/3.0) * timeStep * k2) + ((4.0/9.0) * timeStep * k3);

	float stepLength = length(spaceStep);
	if(stepLength < 1){
		spaceStep = spaceStep / stepLength;
	}
	vec2 previousLocation = currLocation - spaceStep;
	previousLocation = AdjustLocation(previousLocation);
	return BiCubicInterpolate(previousLocation);

}


void main(){
	ivec2 texelCoord = ivec2(gl_GlobalInvocationID.xy);
	
	// for interpolating both
	vec2 currentGridValue = imageLoad(velocityGrid, texelCoord).xy;
	
	vec2 xLocation = vec2(texelCoord.x + 0.5, texelCoord.y);

	// vector for right staggered point
	vec2 xVector = DetermineStaggerXVector(texelCoord, currentGridValue);
	
	vec2 xResult = vec2(0);
	if(length(xVector) > 0.01){

		xResult = ApplyRungeKutta(xLocation, xVector);
	}


	vec2 yLocation = vec2(texelCoord.x, texelCoord.y + 0.5);

	// vector for up staggered point
	vec2 yVector = DetermineStaggerYVector(texelCoord, currentGridValue);

	vec2 yResult = vec2(0);
	if(length(yVector) > 0.01){

		yResult = ApplyRungeKutta(yLocation, yVector);
	}

	imageStore(outGrid, texelCoord, vec4(xResult.x, yResult.y, 0, 0));
}
#version 430 core

layout (local_size_x = 8, local_size_y = 8, local_size_z = 1) in;

layout(rgba32f, binding = 0) uniform image2D xImage;
layout(rgba32f, binding = 1) uniform image2D bImage;
layout(rgba32f, binding = 2) uniform image2D velImage;

layout (location = 0) uniform float alpha;
layout (location = 1) uniform float rBeta;
layout (location = 2) uniform ivec2 imageSize;
layout (location = 3) uniform float omega;
layout (location = 4) uniform int offset;
//change to double


void SORIteration(ivec2 texelCoord){
	float currentX = imageLoad(xImage, texelCoord).x;
	ivec2 xLCoord = texelCoord - ivec2(1,0);
	float xL = imageLoad(xImage, xLCoord).x;
	ivec2 xRCoord = texelCoord + ivec2(1,0);
	float xR = imageLoad(xImage, xRCoord).x;
	ivec2 xBCoord = texelCoord - ivec2(0,1);
	float xB = imageLoad(xImage, xBCoord).x;
	ivec2 xTCoord = texelCoord + ivec2(0,1);
	float xT = imageLoad(xImage, xTCoord).x;
	float bC = imageLoad(bImage, texelCoord).x;

	//boundary condition calculations
	float currentXMult = (1.0f/rBeta);
	if(xLCoord.x < 1){
		xL = 0.0f;
		currentXMult -= 1;

		bC += imageLoad(velImage, xLCoord).x;
	}
	if(xRCoord.x >= imageSize.x){
		xR = 0.0f;
		currentXMult -= 1;

		bC -=  imageLoad(velImage, texelCoord).x;
	}
	if(xBCoord.y < 1){
		xB = 0.0f;
		currentXMult -= 1;

		bC += imageLoad(velImage, xBCoord).y;
	}
	if(xTCoord.y >= imageSize.y){
		xT = 0.0f;
		currentXMult -= 1;

		bC -= imageLoad(velImage, texelCoord).y;
	}
	//SOR itterative calculation
	float xiSub = (xT + xB + xR + xL  - (currentXMult * currentX));
	float xi = alpha * bC - xiSub;

	


	vec4 result = vec4(currentX - rBeta * xi * omega, 0, 0, 0);
	imageStore(xImage, texelCoord, result);
}


void main() {
	ivec2 texelCoord = ivec2(gl_GlobalInvocationID.xy);
	texelCoord = ivec2(texelCoord.x * 2 + texelCoord.y%2 + offset, texelCoord.y);
	SORIteration(texelCoord);
}
